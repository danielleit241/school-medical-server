// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolMedicalServer.Infrastructure.Data;

#nullable disable

namespace SchoolMedicalServer.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolMedicalManagementContext))]
    [Migration("20250528140315_AddTopicToAppointment")]
    partial class AddTopicToAppointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AppointmentID");

                    b.Property<DateOnly?>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointmentReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeOnly?>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<bool?>("CompletionStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConfirmationStatus")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StaffNurseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffNurseId");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("Topic")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCA27FD29BEA");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckResult", b =>
                {
                    b.Property<Guid>("ResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ResultID");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("DatePerformed")
                        .HasColumnType("date");

                    b.Property<string>("Hearing")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Nose")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RecordedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecordedID");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<double?>("VisionLeft")
                        .HasColumnType("float");

                    b.Property<double?>("VisionRight")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ResultId")
                        .HasName("PK__HealthCh__976902283B65C17C");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthCheckResult", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("HealthCheckType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("TargetGrade")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__HealthCh__9C8A5B69BE2ABA03");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("HealthCheckSchedule", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthDeclaration", b =>
                {
                    b.Property<Guid>("HealthDeclarationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthDeclarationID");

                    b.Property<string>("ChronicDiseases")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("DeclarationDate")
                        .HasColumnType("date");

                    b.Property<string>("DrugAllergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FoodAllergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.HasKey("HealthDeclarationId")
                        .HasName("PK__HealthDe__327AAD7D8F9E8268");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthDeclaration", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthProfile", b =>
                {
                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfileID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("HealthCheckResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthCheckResultID");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RecordedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecordedID");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<Guid?>("VaccinationResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationResultID");

                    b.HasKey("HealthProfileId")
                        .HasName("PK__HealthPr__73C2C2B51D74B658");

                    b.HasIndex("HealthCheckResultId");

                    b.HasIndex("StudentId");

                    b.HasIndex("VaccinationResultId");

                    b.ToTable("HealthProfile", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<DateTime?>("EventDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool?>("ParentNotified")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RecordedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecordedID");

                    b.Property<string>("SeverityLevel")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("EventId")
                        .HasName("PK__MedicalE__7944C8702997A560");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalEvent", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalInventory", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemID");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ItemId")
                        .HasName("PK__MedicalI__727E83EBABA65EC3");

                    b.ToTable("MedicalInventory", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRegistration", b =>
                {
                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegistrationID");

                    b.Property<DateOnly?>("DateSubmitted")
                        .HasColumnType("date");

                    b.Property<string>("Dosage")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ParentalConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("RegistrationId")
                        .HasName("PK__MedicalR__6EF58830C8922221");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalRegistration", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRequest", b =>
                {
                    b.Property<Guid>("RequestItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestItemID");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemID");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("RequestDate")
                        .HasColumnType("date");

                    b.Property<int?>("RequestedQuantity")
                        .HasColumnType("int");

                    b.HasKey("RequestItemId")
                        .HasName("PK__MedicalR__3F51AD77BE2FAFF0");

                    b.HasIndex("EventId");

                    b.HasIndex("ItemId");

                    b.ToTable("MedicalRequest", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NotificationID");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<Guid?>("HealthCheckScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthCheckScheduleID");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<Guid?>("VaccineScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccineScheduleID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32256F768A");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE3A0F6D7D18");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "nurse"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "manager"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "parent"
                        });
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("DayOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Grade")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .IsFixedLength();

                    b.Property<string>("ParentEmailAddress")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("ParentPhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("StudentId")
                        .HasName("PK__Student__32C52A79AED3062C");

                    b.HasIndex("UserId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("DayOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCAC7059EAEE");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationDeclaration", b =>
                {
                    b.Property<Guid>("VaccinationDeclarationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationDeclarationID");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("HealthDeclarationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthDeclarationID");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("VaccinatedDate")
                        .HasColumnType("date");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VaccinationDeclarationId")
                        .HasName("PK__VaccinationDeclaration");

                    b.HasIndex("HealthDeclarationId");

                    b.ToTable("VaccinationDeclaration", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", b =>
                {
                    b.Property<Guid>("VaccinationResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationResultID");

                    b.Property<int?>("DoseNumber")
                        .HasColumnType("int");

                    b.Property<string>("ImmediateReaction")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjectionSite")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ReactionStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ReactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RecordedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecordedID");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("SeverityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<DateOnly?>("VaccinationDate")
                        .HasColumnType("date");

                    b.HasKey("VaccinationResultId")
                        .HasName("PK__Vaccinat__12DE8FD91DB6B240");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentId");

                    b.ToTable("VaccinationResult", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Round")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("TargetGrade")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("VaccineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccineID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Vaccinat__9C8A5B694492A7A5");

                    b.HasIndex("StudentId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccinationSchedule", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccineDetail", b =>
                {
                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccineID");

                    b.Property<string>("AgeRecommendation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContraindicationNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Disease")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DoseNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VaccineName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VaccineType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VaccineId")
                        .HasName("PK__VaccineD__45DC68E9F459710F");

                    b.ToTable("VaccineDetails");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Appointment", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("Appointments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Appointme__Stude__52593CB8");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Appointme__UserI__534D60F1");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckResult", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthCheckSchedule", "Schedule")
                        .WithMany("HealthCheckResults")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK__HealthChe__Sched__74AE54BC");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("HealthCheckResults")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__HealthChe__Stude__73BA3083");

                    b.Navigation("Schedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckSchedule", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("HealthCheckSchedules")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__HealthChe__Stude__6FE99F9F");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("HealthCheckSchedules")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__HealthChe__UserI__70DDC3D8");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthDeclaration", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("HealthDeclarations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__HealthDec__Stude__656C112C");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthProfile", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthCheckResult", "HealthCheckResult")
                        .WithMany("HealthProfiles")
                        .HasForeignKey("HealthCheckResultId")
                        .HasConstraintName("FK__HealthPro__Healt__797309D9");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("HealthProfiles")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__HealthPro__Stude__778AC167");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", "VaccinationResult")
                        .WithMany("HealthProfiles")
                        .HasForeignKey("VaccinationResultId")
                        .HasConstraintName("FK__HealthPro__Vacci__787EE5A0");

                    b.Navigation("HealthCheckResult");

                    b.Navigation("Student");

                    b.Navigation("VaccinationResult");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__MedicalEv__Stude__59FA5E80");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__MedicalEv__UserI__5AEE82B9");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRegistration", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("MedicalRegistrations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__MedicalRe__Stude__5629CD9C");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("MedicalRegistrations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__MedicalRe__UserI__571DF1D5");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRequest", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", "Event")
                        .WithMany("MedicalRequests")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__MedicalRe__Event__5FB337D6");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.MedicalInventory", "Item")
                        .WithMany("MedicalRequests")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__MedicalRe__ItemI__60A75C0F");

                    b.Navigation("Event");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Notification", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("Notifications")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Notificat__Stude__7D439ABD");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__7E37BEF6");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Student", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Student__UserID__4F7CD00D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.User", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleID__4CA06362");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationDeclaration", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthDeclaration", "HealthDeclaration")
                        .WithMany("VaccinationDeclarations")
                        .HasForeignKey("HealthDeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VaccinationDeclaration_HealthDeclaration");

                    b.Navigation("HealthDeclaration");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", "Schedule")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK__Vaccinati__Sched__6D0D32F4");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Vaccinati__Stude__6C190EBB");

                    b.Navigation("Schedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Vaccinati__Stude__68487DD7");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.VaccineDetail", "Vaccine")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("VaccineId")
                        .HasConstraintName("FK__Vaccinati__Vacci__693CA210");

                    b.Navigation("Student");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckResult", b =>
                {
                    b.Navigation("HealthProfiles");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckSchedule", b =>
                {
                    b.Navigation("HealthCheckResults");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthDeclaration", b =>
                {
                    b.Navigation("VaccinationDeclarations");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", b =>
                {
                    b.Navigation("MedicalRequests");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalInventory", b =>
                {
                    b.Navigation("MedicalRequests");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Student", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthCheckResults");

                    b.Navigation("HealthCheckSchedules");

                    b.Navigation("HealthDeclarations");

                    b.Navigation("HealthProfiles");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicalRegistrations");

                    b.Navigation("Notifications");

                    b.Navigation("VaccinationResults");

                    b.Navigation("VaccinationSchedules");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthCheckSchedules");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicalRegistrations");

                    b.Navigation("Notifications");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", b =>
                {
                    b.Navigation("HealthProfiles");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", b =>
                {
                    b.Navigation("VaccinationResults");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccineDetail", b =>
                {
                    b.Navigation("VaccinationSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
