// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolMedicalServer.Infrastructure;

#nullable disable

namespace SchoolMedicalServer.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolMedicalManagementContext))]
    [Migration("20250623083234_UpdatePicUrlInMedicalRegistration")]
    partial class UpdatePicUrlInMedicalRegistration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AppointmentID");

                    b.Property<DateOnly?>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("AppointmentDate");

                    b.Property<TimeOnly?>("AppointmentEndTime")
                        .HasColumnType("time")
                        .HasColumnName("AppointmentEndTime");

                    b.Property<string>("AppointmentReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeOnly?>("AppointmentStartTime")
                        .HasColumnType("time")
                        .HasColumnName("AppointmentStartTime");

                    b.Property<DateTime?>("CompletionAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("CompletionStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmationAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConfirmationStatus")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StaffNurseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffNurseId");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("Topic")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCA27FD29BEA");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckResult", b =>
                {
                    b.Property<Guid>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DatePerformed")
                        .HasColumnType("date");

                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hearing")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Nose")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ParentConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RecordedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RecordedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("VisionLeft")
                        .HasColumnType("float");

                    b.Property<double?>("VisionRight")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ResultId");

                    b.HasIndex("HealthProfileId");

                    b.HasIndex("RoundId");

                    b.ToTable("HealthCheckResult", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckRound", b =>
                {
                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("NurseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoundName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TargetGrade")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoundId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("HealthCheckRound", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("HealthCheckType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateOnly?>("ParentNotificationEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ParentNotificationStartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ScheduleId");

                    b.ToTable("HealthCheckSchedule", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthProfile", b =>
                {
                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfileID");

                    b.Property<string>("ChronicDiseases")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DeclarationDate")
                        .HasColumnType("date");

                    b.Property<string>("DrugAllergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FoodAllergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.HasKey("HealthProfileId")
                        .HasName("PK__HealthPr__73C2C2B51D74B658");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentID] IS NOT NULL");

                    b.ToTable("HealthProfile", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("date")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ParentNotified")
                        .HasColumnType("bit")
                        .HasColumnName("ParentNotified");

                    b.Property<string>("SeverityLevel")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("StaffNurseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffNurseID");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.HasKey("EventId")
                        .HasName("PK__MedicalE__7944C8702997A560");

                    b.HasIndex("StaffNurseId");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicalEvent", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalInventory", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemID");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ItemName");

                    b.Property<DateTime?>("LastExportDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastExportDate");

                    b.Property<DateTime?>("LastImportDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastImportDate");

                    b.Property<int>("MaximumStockLevel")
                        .HasColumnType("int")
                        .HasColumnName("MaximumStockLevel");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("int")
                        .HasColumnName("MinimumStockLevel");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("QuantityInStock");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UnitOfMeasure");

                    b.HasKey("ItemId")
                        .HasName("PK__MedicalI__727E83EBABA65EC3");

                    b.ToTable("MedicalInventory", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRegistration", b =>
                {
                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegistrationID");

                    b.Property<DateOnly?>("DateApproved")
                        .HasColumnType("date")
                        .HasColumnName("DateApproved");

                    b.Property<DateOnly?>("DateSubmitted")
                        .HasColumnType("date");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ParentalConsent")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StaffNurseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffNurseID");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Status");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("TotalDosages")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("RegistrationId")
                        .HasName("PK__MedicalR__6EF58830C8922221");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalRegistration", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRegistrationDetails", b =>
                {
                    b.Property<Guid>("MedicalRegistrationDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MedicalRegistrationDetailsID");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCompleted");

                    b.Property<string>("DoseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DoseNumber");

                    b.Property<string>("DoseTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegistrationID");

                    b.Property<Guid?>("StaffNurseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffNurseID");

                    b.HasKey("MedicalRegistrationDetailsId")
                        .HasName("PK__MedicalRegistrationDetails");

                    b.HasIndex("RegistrationId");

                    b.ToTable("MedicalRegistrationDetails", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemID");

                    b.Property<Guid?>("MedicalEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MedicalEventID");

                    b.Property<string>("Purpose")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("RequestDate")
                        .HasColumnType("date")
                        .HasColumnName("RequestDate");

                    b.Property<int?>("RequestQuantity")
                        .HasColumnType("int")
                        .HasColumnName("RequestQuantity");

                    b.HasKey("RequestId")
                        .HasName("PK__MedicalR__RequestId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MedicalEventId");

                    b.ToTable("MedicalRequest", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NotificationID");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsRead");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ReadDate");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SenderID");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SourceID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32256F768A");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE3A0F6D7D18");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "nurse"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "manager"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "parent"
                        });
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly?>("DayOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DayOfBirth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Grade")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .IsFixedLength();

                    b.Property<string>("ParentEmailAddress")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("ParentPhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("StudentId")
                        .HasName("PK__Student__32C52A79AED3062C");

                    b.HasIndex("StudentCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Student_StudentCode_Unique")
                        .HasFilter("[StudentCode] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly?>("DayOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Otp")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("OtpExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCAC7059EAEE");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationDeclaration", b =>
                {
                    b.Property<Guid>("VaccinationDeclarationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationDeclarationID");

                    b.Property<string>("DoseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfileID");

                    b.Property<DateOnly?>("VaccinatedDate")
                        .HasColumnType("date");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VaccinationDeclarationId")
                        .HasName("PK__VaccinationDeclaration");

                    b.HasIndex("HealthProfileId");

                    b.ToTable("VaccinationDeclaration", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationDetail", b =>
                {
                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccineID");

                    b.Property<string>("AgeRecommendation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContraindicationNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VaccineCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VaccineName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VaccineType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VaccineId")
                        .HasName("PK__VaccinationDetail__VaccineId");

                    b.ToTable("VaccinationDetails", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationObservation", b =>
                {
                    b.Property<Guid>("VaccinationObservationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationObservationID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImmediateReaction")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Intervention")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ObservationEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ObservationStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ObservedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ReactionStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ReactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeverityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VaccinationResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationResultID");

                    b.HasKey("VaccinationObservationId");

                    b.HasIndex("VaccinationResultId")
                        .IsUnique();

                    b.ToTable("VaccinationObservation", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", b =>
                {
                    b.Property<Guid>("VaccinationResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationResultID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfileID");

                    b.Property<bool?>("HealthQualified")
                        .HasColumnType("bit");

                    b.Property<string>("InjectionSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ParentConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("ParentConfirmed");

                    b.Property<Guid>("RecorderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecorderID");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoundID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Vaccinated")
                        .HasColumnType("bit")
                        .HasColumnName("Vaccinated");

                    b.Property<DateOnly?>("VaccinatedDate")
                        .HasColumnType("date")
                        .HasColumnName("VaccinatedDate");

                    b.Property<DateTime?>("VaccinatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VaccinationResultId")
                        .HasName("PK__Vaccinat__12DE8FD91DB6B240");

                    b.HasIndex("HealthProfileId");

                    b.HasIndex("RoundId");

                    b.ToTable("VaccinationResult", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationRound", b =>
                {
                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoundID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NurseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoundName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<string>("TargetGrade")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoundId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("VaccinationRound", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ParentNotificationEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ParentNotificationStartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("VaccineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccineID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Vaccinat__9C8A5B694492A7A5");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccinationSchedule", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Appointment", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("Appointments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Appointme__Stude__52593CB8");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Appointme__UserI__534D60F1");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckResult", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthProfile", "HealthProfile")
                        .WithMany("HealthCheckResults")
                        .HasForeignKey("HealthProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthCheckRound", "Round")
                        .WithMany("HealthCheckResults")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthProfile");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckRound", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthCheckSchedule", "Schedule")
                        .WithMany("Rounds")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthProfile", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithOne("HealthProfile")
                        .HasForeignKey("SchoolMedicalServer.Abstractions.Entities.HealthProfile", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_HealthProfile_Student");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("StaffNurseId")
                        .HasConstraintName("FK_MedicalEvent_User");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_MedicalEvent_Student");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRegistration", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Student", "Student")
                        .WithMany("MedicalRegistrations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__MedicalRe__Stude__5629CD9C");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("MedicalRegistrations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__MedicalRe__UserI__571DF1D5");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRegistrationDetails", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.MedicalRegistration", "MedicalRegistration")
                        .WithMany("Details")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRegistrationDetails_MedicalRegistration");

                    b.Navigation("MedicalRegistration");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRequest", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.MedicalInventory", "Item")
                        .WithMany("MedicalRequests")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_MedicalRequest_MedicalInventory");

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", "Event")
                        .WithMany("MedicalRequests")
                        .HasForeignKey("MedicalEventId")
                        .HasConstraintName("FK_MedicalRequest_MedicalEvent");

                    b.Navigation("Event");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Notification", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Student", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Student__UserID__4F7CD00D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.User", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleID__4CA06362");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationDeclaration", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthProfile", "HealthProfile")
                        .WithMany("VaccinationDeclarations")
                        .HasForeignKey("HealthProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VaccinationDeclaration_HealthProfile");

                    b.Navigation("HealthProfile");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationObservation", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", "VaccinationResult")
                        .WithOne("VaccinationObservation")
                        .HasForeignKey("SchoolMedicalServer.Abstractions.Entities.VaccinationObservation", "VaccinationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VaccinationObservation_VaccinationResult");

                    b.Navigation("VaccinationResult");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.HealthProfile", "HealthProfile")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("HealthProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.VaccinationRound", "Round")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthProfile");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationRound", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", "Schedule")
                        .WithMany("Rounds")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VaccinationRound_VaccinationSchedule");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", b =>
                {
                    b.HasOne("SchoolMedicalServer.Abstractions.Entities.VaccinationDetail", "Vaccine")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckRound", b =>
                {
                    b.Navigation("HealthCheckResults");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthCheckSchedule", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.HealthProfile", b =>
                {
                    b.Navigation("HealthCheckResults");

                    b.Navigation("VaccinationDeclarations");

                    b.Navigation("VaccinationResults");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalEvent", b =>
                {
                    b.Navigation("MedicalRequests");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalInventory", b =>
                {
                    b.Navigation("MedicalRequests");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.MedicalRegistration", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.Student", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthProfile");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicalRegistrations");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicalRegistrations");

                    b.Navigation("Notifications");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationDetail", b =>
                {
                    b.Navigation("VaccinationSchedules");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationResult", b =>
                {
                    b.Navigation("VaccinationObservation");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationRound", b =>
                {
                    b.Navigation("VaccinationResults");
                });

            modelBuilder.Entity("SchoolMedicalServer.Abstractions.Entities.VaccinationSchedule", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
